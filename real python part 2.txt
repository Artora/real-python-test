https://github.com/realpython/book2-exercises/

Real Python Part 2

started reading 6.8.2019


6.8.2019 read until page 28 1.2.7 Version Control: Setting up Git
8.8.2019 read until page 43 1.4.4 App Flow
9.8.2019 read until page 50 1.5 Interlude: Database Programming
24.8.2019 read until page 62 Updating and Deleting
25.8.2019 read until page 68 SQL Functions
28.8.2019 read until page 77 1.6 Flask Blog App
28.8.2019 read until page 83 Views
29.8.2019 read until page 88 User Login
30.8.2019 read until page 93 Sessions
30.8.2019 read until page 95 "When a GET request is sent...."
2.9.2019 read until page 98 Show Posts
20.9.2019 read until page 105 1.7 Interlude: Debugging in Python
21.9.2019 read until page 115 1.8 Flask: FlaskTaskr, Part 1 - Quick Start
22.9.2019 read until page 122 Templates and Styles
23.9.2019 read until page 126 Tasks
24.9.2019 read until page 133 Sanity Check
26.9.2019 read until page 136 1.9 Flask: FlaskTaskr, Part 2 - SQLAlchemy and User Management
27.9.2019 read until page 139 Database Management
28.9.2019 read until page 147 User Registration
29.9.2019 read until page 154 Database Relationships
30.9.2019 read until page 157
1.10.2019 read until page 159 Templates
2.10.2019 read until page 164 Flask: FlaskTaskr, Part 3 - Error Handling
2.10.2019 read until page 171 Testing
3.10.2019 read until page 174 Assert
5.10.2019 read until page 178 Users
6.10.2019 read until page 182 Users can access tasks
9.10.2019 read until page 185 Interlude: Intro to HTML and CSS


10 1.1 Introduction
16 1.2 Getting Started
33 1.3 Interlude: Modern Web Development
37 1.4 Flask: Quick Start
50 1.5 Interlude: Database Programming
77 1.6 Flask Blog App
105 1.7 Interlude: Debugging in Python
115 1.8 Flask: FlaskTaskr, Part 1 - Quick Start
136 1.9 Flask: FlaskTaskr, Part 2 - SQLAlchemy and User Management
164 1.10 Flask: FlaskTaskr, Part 3 - Error Handling and Testing
186 1.11 Interlude: Intro to HTML and CSS
195 1.12 Flask: FlaskTaskr, Part4 - Styles, Test Coverage, and Permissions
216 1.13 Flask: FlaskTaskr, Part 5 - Blueprints
230 1.14 Flask: FlaskTaskr, Part 6 - New features and Error Handling
252 1.15 Flask:FlaskTaskr, Part 7 - Deployment
262 1.16 Flask: FlaskTaskr, Part 8 - RESTful API
273 1.17 Interlude: Flask Boilerplate Template and Workflow
276 1.18 Flask: FlaskTaskr, Part 9: Continuous Integration and Delivery
293 1.19 Flask: Behavior-Driven Development with Behave
321 1.20 Interlude: Web Frameworks, Compared
325 1.21 web2py: Quick Start

PYTHON 3.6 PATH
C:\Users\artomatti.ratilainen\AppData\Local\Programs\Python\Python36

$ pyenv virtualenv 3.6 <name-to-give-it>

# install virtualenv to create virtual envs with specific python versions
pip install virtualenv

# create python virtual environment with specific python version
virtualenv --python=/C/Users/USERNAME/AppData/Local/Programs/Python/Python36/python.exe env_python_3_6_0


# install required packages
pip install -r requirements.txt

VIDEOS
page 12

COURSE REPOSITORY
github.com/realpython/book2-exercises

SUPPORT
github.com/realpython/support

CMD COMMANDS

cd - navigating to folders
cd .. - going back one folder
dir - listing folder contents
cls - clear the screen
del - delete a file
md - create new folder
rd - remove a folder
echo file_content > file_name - create new file


ISNTALLING SQLITE

VIRTUAL ENVIRONMENT

# create a new directory "venv" and set up a virtual environment within that directory
python -m venv env

# activate the virtual environment:
env\scripts\activate
source env/Scripts/activate

# deactivate the virtual environment
deactivate

Every time you create a new project, install a new virtual environment.

# install python packages and get packages and version info into a text file
$ pip install flask==0.11.1
$ pip freeze > requirements.txt

Make sure to add a .gitignore file to the "flasktaskr" directory:
env
venv
*.pyc
__pycache__
*.DS_Store
project/_config.py

CHROME

press ctrl + shift + I to activate developer tools

VERSION CONTROL

We will be using Git for version control and Github for remotely hosting our code.

SETTING UP Git

git-scm.com/downloads/

read chapter 2 and 3 of the Git Book:
git-scm.com/book/

Add the repo on Github. Run the following commands in your local directory:
$ git init
$ touch README.md # creates a file
$ git add -A # takes a snapshot of the project in its current state
$ git commit -m "some message" # adds the project to your repo
$ git remote add origin https:// # adds the project to GitHub
$ git push origin master # PUSHes the local repo to Github


Next, after your repo has been created locally and remotely - and you completed your
first PUSH - you can follow this similar workflow to PUSH as needed:
$ git add -A # takes a snapshot of the project in its current state
$ git commit -am 'message'
$ git push origin master


Next add a .gitignore file (no file extension!), which is a file that you can use to specify
files you wish to ignore or keep out of your repository, both local and remote. What files
should you keep out? If it's clutter (such as a .pyc file) or a secret (such as an API key),
then keep it out of your public repo on Github.
Please read more about .gitignore here. For now, add the files found here.
git-scm.com/docs/gitignore
github.com/github/gitignore/blob/master/Python.gitignore

set up RSA key for use with Github so you don't have to enter password each time you push code to Github
https://help.github.com/en/articles/connecting-to-github-with-ssh


YOUR SETUP
# Finally, we want to set up a requirements.txt file for each virtual environment. This file contains a list of packages you've installed via pip. This is meant to be used by other developers to recreate the same development environment. To do this, run the following command when your virtual environment is activated:
$ pip freeze > requirements.txt

read more about the basic Git commands at
gitref.org/basic/


INTERLUDE: MODERN WEB DEVELOPMENT page 33
MODEL VIEW CONTROLLER MVC page 354
Read about the differences between a website (static) and a web application (dynamic) here.
eepurl.com/xnT3b

Want to learn more about MVC? Read Model-View-Controller (MVC) Explained -- With Legos
realpython.com/blog/python/the-model-view-controller-mvc-paradigm-summarized-with-legos/


1.4 FLASK: QUICK START

Save the file as app.py and run it:
$ python app.py
open http://127.0.0.1:5000/ in browser to see the webpage

http://127.0.0.1:5000/
http://localhost:5000


1.5 INTERLUDE: DATABASE PROGRAMMING
SQL AND SQLite BASICS

The 4 basic SQL commands:
SELECT - retrieves data from the database
INSERT - inserts data from the database
UPDATE - updates data from the database
DELETE - deletes data from the database



##########################
WHEN STARTING AGAIN AFTER STARTING PC, DO THE FOLLOWING:

# 1. OPEN GIT BASH

# 2. NAVIGATE TO FOLDER
$ cd /D/Sync/python/real-python-test/

$ cd Desktop/omat\ tiedostot/python/real\ python/book\ 2/real-python-test/flasktaskr/


# 3. ACTIVATE VIRTUAL ENVIRONMENT
$ source env/Scripts/activate

# 4. MERGING UPDATES FROM GitHub TO OWN PC
$ git pull origin master

# 5. UPDATING GitHub
$ git add -A # takes a snapshot of the project in its current state
$ git commit -am 'message'
$ git push origin master

##########################

# To change the drive in Windows cmd
cd /d D:\Sync\python\real-python-test\debugging

SQL Summary

Basic SQL syntax...

Insert

INSERT INTO table_name (column1, column2, column3)
VALUES (value1, value2, value3);

Update

UPDATE table_name
SET column1=value1
WHERE some_column=some_value;

Delete

DELETE FROM table_name
WHERE some_column=some_value;

further SQL resources:
http://zetcode.com/
http://www.tutorialspoint.com/python/python_database_access.htm


1.5 FLASK BLOG APP

start server by running:
python blog.py (chnage filename to what you want to run)
then open page localhost:5000 in browser
http://localhost:5000/


WARNING: Make the value of your secret key really, really hard, if not impossible,
to guess. Use a random key generator to do this. Never, ever use a value you pick
on your own. Or you can use your OS to get a random string:
>>> import os
>>> os.urandom(24)
'rM\xb1\xdc\x12o\xd6i\xff+9$T\x8e\xec\x00\x13\x82.*\x16TG\xbd'
Now you can simply assign that string to the secret key: SECRET_KEY =
rM\xb1\xdc\x12o\xd6i\xff+9$T\x8e\xec\x00\x13\x82.*\x16TG\xbd


1.7 Interlude: Debugging in Python

pdb module

From here you step through your code to see what happens, line by line. You have access to a number of commands, which can be daunting at first, but on a day-to-day basis you'll only use a few of them:
	n : step forward one line
	p <variable name> : prints the current value of the provided variable
	l : displays the entire program along with where the current break point is
	q : exits the debugger and the program
	c : exits the debugger and the program continues to run
	b <line #> : adds a breakpoint at a specific line #
NOTE If you don't remember the list of commands you can always type ? or help to see the entire list.



