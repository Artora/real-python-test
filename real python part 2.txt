https://github.com/realpython/book2-exercises/

Real Python Part 2

started reading 6.8.2019


6.8.2019 read until page 28 1.2.7 Version Control: Setting up Git
8.8.2019 read until page 43 1.4.4 App Flow
9.8.2019 read until page 50 1.5 Interlude: Database Programming
24.8.2019 read until page 62 Updating and Deleting
25.8.2019 read until page 68 SQL Functions
28.8.2019 read until page 77 1.6 Flask Blog App
28.8.2019 read until page 83 Views
29.8.2019 read until page 88 User Login
30.8.2019 read until page 93 Sessions
30.8.2019 read until page 95 "When a GET request is sent...."
2.9.2019 read until page 98 Show Posts
20.9.2019 read until page 105 1.7 Interlude: Debugging in Python
21.9.2019 read until page 115 1.8 Flask: FlaskTaskr, Part 1 - Quick Start
22.9.2019 read until page 122 Templates and Styles
23.9.2019 read until page 126 Tasks
24.9.2019 read until page 133 Sanity Check
26.9.2019 read until page 136 1.9 Flask: FlaskTaskr, Part 2 - SQLAlchemy and User Management
27.9.2019 read until page 139 Database Management
28.9.2019 read until page 147 User Registration
29.9.2019 read until page 154 Database Relationships
30.9.2019 read until page 157
1.10.2019 read until page 159 Templates
2.10.2019 read until page 164 Flask: FlaskTaskr, Part 3 - Error Handling
2.10.2019 read until page 171 Testing
3.10.2019 read until page 174 Assert
5.10.2019 read until page 178 Users
6.10.2019 read until page 182 Users can access tasks
9.10.2019 read until page 185 Interlude: Intro to HTML and CSS
9.10.2019 read until page 188 Elements, Tags, and Attributes
10.10.2019 read until page 190 CSS
22.10.2019 read until page 192 Putting it all together
23.10.2019 read until page 196 1.12 Flask: FlaskTaskr, Part4 - Styles, Test Coverage, and Permissions
23.10.2019 read until page 199 Custom Styles
24.10.2019 read until page 204 Nose Testing Framework
25.10.2019 read until page 206 Permissions
30.10.2019 read until page 209 Admin Permissions
31.10.2019 read until page 210 Write the code
10.11.2019 read until page 216 1.13 Flask: FlaskTaskr, Part 5 - Blueprints
13.11.2019 read until page 224 Step 3: Creating the Blueprints
14.11.2019 read until page 225 Step 4: Updating the main app
15.11.2019 read until page 230 Flask: FlaskTaskr, Part 6 - New Features and Error Handling
18.11.2019 read until page 234 Display, Update and Delete links
19.11.2019 read until page 238 Password Hashing
20.11.2019 read until page 242 Custom Error Pages
21.11.2019 read until page 248 Update Debug Mode
27.11.2019 read until page 252 Flask: FlaskTaskr, Part 7 - Deployment
28.11.2019 read until page 255 Deploy
29.11.2019 read until page 262 Flask: FlaskTaskr, Part 8 = RESTful API
2.12.2019 read until page 266 Code
5.12.2019 read until page 273 Interlude: Flask BoilerPlate Template and Workflow
12.12.2019 read until page 277 Flask: FlaskTaskr, Part 9: Continuous Integration and Delivery

################
#### Book 3 ####
################
# 19.12.2019 BOOK 3: read until page 94: Issue a pull request to merge your feature branch back to master
# 20.12.2019 BOOK 3: read until page 97: Exercises
# 24.12.2019 BOOK 3: finished Chapter 5: Git Branching at a Glance

#########################
#### Book 2 continue ####
#########################

25.12.2019 read until page 281 Step 2: Add a Config File



10 1.1 Introduction
16 1.2 Getting Started
33 1.3 Interlude: Modern Web Development
37 1.4 Flask: Quick Start
50 1.5 Interlude: Database Programming
77 1.6 Flask Blog App
105 1.7 Interlude: Debugging in Python
115 1.8 Flask: FlaskTaskr, Part 1 - Quick Start
136 1.9 Flask: FlaskTaskr, Part 2 - SQLAlchemy and User Management
164 1.10 Flask: FlaskTaskr, Part 3 - Error Handling and Testing
186 1.11 Interlude: Intro to HTML and CSS
196 1.12 Flask: FlaskTaskr, Part4 - Styles, Test Coverage, and Permissions
216 1.13 Flask: FlaskTaskr, Part 5 - Blueprints
230 1.14 Flask: FlaskTaskr, Part 6 - New features and Error Handling
252 1.15 Flask:FlaskTaskr, Part 7 - Deployment
262 1.16 Flask: FlaskTaskr, Part 8 - RESTful API
273 1.17 Interlude: Flask Boilerplate Template and Workflow
276 1.18 Flask: FlaskTaskr, Part 9: Continuous Integration and Delivery
293 1.19 Flask: Behavior-Driven Development with Behave
321 1.20 Interlude: Web Frameworks, Compared
325 1.21 web2py: Quick Start

PYTHON 3.6 PATH
C:\Users\artomatti.ratilainen\AppData\Local\Programs\Python\Python36

$ pyenv virtualenv 3.6 <name-to-give-it>

# install virtualenv to create virtual envs with specific python versions
pip install virtualenv

# create python virtual environment with specific python version
virtualenv --python=/C/Users/USERNAME/AppData/Local/Programs/Python/Python36/python.exe env_python_3_6_0


# install required packages
pip install -r requirements.txt

VIDEOS
page 12

COURSE REPOSITORY
github.com/realpython/book2-exercises

SUPPORT
github.com/realpython/support

######################
#### CMD COMMANDS ####
######################

cd - navigating to folders
cd .. - going back one folder
dir - listing folder contents
cls - clear the screen
del - delete a file
md - create new folder
rd - remove a folder
echo file_content > file_name - create new file


###########################
#### INSTALLING SQLITE ####
###########################

VIRTUAL ENVIRONMENT

# create a new directory "venv" and set up a virtual environment within that directory
python -m venv env

# activate the virtual environment:
env\scripts\activate
source env/Scripts/activate

# deactivate the virtual environment
deactivate

Every time you create a new project, install a new virtual environment.

# install python packages and get packages and version info into a text file
$ pip install flask==0.11.1
$ pip freeze > requirements.txt

Make sure to add a .gitignore file to the "flasktaskr" directory:
env
venv
*.pyc
__pycache__
*.DS_Store
project/_config.py

CHROME

press ctrl + shift + I to activate developer tools

VERSION CONTROL

We will be using Git for version control and Github for remotely hosting our code.

########################
#### SETTING UP Git ####
########################

git-scm.com/downloads/

read chapter 2 and 3 of the Git Book:
git-scm.com/book/

Add the repo on Github. Run the following commands in your local directory:
$ git init
$ touch README.md # creates a file
$ git add -A # takes a snapshot of the project in its current state
$ git commit -m "some message" # adds the project to your repo
$ git remote add origin https:// # adds the project to GitHub
$ git push origin master # PUSHes the local repo to Github


Next, after your repo has been created locally and remotely - and you completed your
first PUSH - you can follow this similar workflow to PUSH as needed:
$ git add -A # takes a snapshot of the project in its current state
$ git commit -am 'message'
$ git push origin master


Next add a .gitignore file (no file extension!), which is a file that you can use to specify
files you wish to ignore or keep out of your repository, both local and remote. What files
should you keep out? If it's clutter (such as a .pyc file) or a secret (such as an API key),
then keep it out of your public repo on Github.
Please read more about .gitignore here. For now, add the files found here.
git-scm.com/docs/gitignore
github.com/github/gitignore/blob/master/Python.gitignore

set up RSA key for use with Github so you don't have to enter password each time you push code to Github
https://help.github.com/en/articles/connecting-to-github-with-ssh


YOUR SETUP
# Finally, we want to set up a requirements.txt file for each virtual environment. This file contains a list of packages you've installed via pip. This is meant to be used by other developers to recreate the same development environment. To do this, run the following command when your virtual environment is activated:
$ pip freeze > requirements.txt

read more about the basic Git commands at
gitref.org/basic/


INTERLUDE: MODERN WEB DEVELOPMENT page 33
MODEL VIEW CONTROLLER MVC page 354
Read about the differences between a website (static) and a web application (dynamic) here.
eepurl.com/xnT3b

Want to learn more about MVC? Read Model-View-Controller (MVC) Explained -- With Legos
realpython.com/blog/python/the-model-view-controller-mvc-paradigm-summarized-with-legos/

################################
#### 1.4 FLASK: QUICK START ####
################################

Save the file as app.py and run it:
$ python app.py
open http://127.0.0.1:5000/ in browser to see the webpage

http://127.0.0.1:5000/
http://localhost:5000

#############################################
#### 1.5 INTERLUDE: DATABASE PROGRAMMING ####
#############################################
SQL AND SQLite BASICS

The 4 basic SQL commands:
SELECT - retrieves data from the database
INSERT - inserts data from the database
UPDATE - updates data from the database
DELETE - deletes data from the database



#############
#### Git ####
#############

WHEN STARTING AGAIN AFTER STARTING PC, DO THE FOLLOWING:

# 1. OPEN GIT BASH

# 2. NAVIGATE TO FOLDER
$ cd /D/Sync/python/real-python-test/

$ cd Desktop/omat\ tiedostot/python/real\ python/book\ 2/real-python-test/flasktaskr/


# 3. ACTIVATE VIRTUAL ENVIRONMENT
$ source env/Scripts/activate

# 4. MERGING UPDATES FROM GitHub TO OWN PC
$ git pull origin master

# 5. UPDATING GitHub
$ git add -A # takes a snapshot of the project in its current state
$ git commit -am 'message'
$ git push origin master

##########################

# To change the drive in Windows cmd
cd /d D:\Sync\python\real-python-test\debugging

#####################
#### SQL Summary ####
#####################

Basic SQL syntax...

Insert

INSERT INTO table_name (column1, column2, column3)
VALUES (value1, value2, value3);

Update

UPDATE table_name
SET column1=value1
WHERE some_column=some_value;

Delete

DELETE FROM table_name
WHERE some_column=some_value;

further SQL resources:
http://zetcode.com/
http://www.tutorialspoint.com/python/python_database_access.htm


############################
#### 1.5 FLASK BLOG APP ####
############################

start server by running:
python blog.py (chnage filename to what you want to run)
then open page localhost:5000 in browser
http://localhost:5000/


WARNING: Make the value of your secret key really, really hard, if not impossible,
to guess. Use a random key generator to do this. Never, ever use a value you pick
on your own. Or you can use your OS to get a random string:
>>> import os
>>> os.urandom(24)
'rM\xb1\xdc\x12o\xd6i\xff+9$T\x8e\xec\x00\x13\x82.*\x16TG\xbd'
Now you can simply assign that string to the secret key: SECRET_KEY =
rM\xb1\xdc\x12o\xd6i\xff+9$T\x8e\xec\x00\x13\x82.*\x16TG\xbd

############################################
#### 1.7 Interlude: Debugging in Python ####
############################################

pdb module

From here you step through your code to see what happens, line by line. You have access to a number of commands, which can be daunting at first, but on a day-to-day basis you'll only use a few of them:
	n : step forward one line
	p <variable name> : prints the current value of the provided variable
	l : displays the entire program along with where the current break point is
	q : exits the debugger and the program
	c : exits the debugger and the program continues to run
	b <line #> : adds a breakpoint at a specific line #
NOTE If you don't remember the list of commands you can always type ? or help to see the entire list.

https://cssvalues.com/ is an excellent resource for finding the acceptable values given a CSS property. Bookmark it!

ADDITIONAL RESOURCES
HTML and CSS https://www.codecademy.com/learn/learn-html
More practice with CSS http://flukeout.github.io/

###########################
#### page 201 COVERAGE ####
###########################

$ pip install coverage==4.2
$ pip freeze > requirements.txt

$ coverage run test.py

$ coverage report --omit=../env/'*'
$ coverage html --omit=../env/'*'

NOTE: If you get stuck with coverage, try calling coverage erase and starting
over. Each time you run coverage run test.py , coverage remembers and is
basing its calculations on the state of the test suite at that point. Changes to the
code may make it necessary to erase coverage and start fresh.


#######################
#### PAGE 204 NOSE ####
#######################

$ nosetests --with-coverage --cover-erase --cover-package=../project

Let's look at the flags that we used:
1. --with-coverage checks for test coverage.
2. --cover-erase erases coverage results from the previous test run.
3. --cover-package==../project specifies which portion of the code to analyze.


PAGE 227
removing old virtual environment and creating a new one
$ deactivate
$ rm -rf env/
$ python3 -m venv env
$ source env/Scripts/activate
$ pip install -r requirements.txt


################
#### HEROKU ####
################

heroku path:
/C/Users/artomatti.ratilainen/Desktop/omat\ tiedostot/heroku/bin/heroku

to login copy paste in git bash:
/C/Users/artomatti.ratilainen/Desktop/omat\ tiedostot/heroku/bin/heroku login

create app on Heroku
$ heroku create

confirm the heroku exists on git
$ git remote -v

if not:
	look the name of the heroku when creating app, for example:
	hidden-sands-78899

	create  the heroku git:
	$ heroku git:remote -a thawing-inlet-61413

Deploy your code to Heroku:
	- to deploy the entire repo:
	$ git push heroku master

	to deploy a subfolder of a repo:
	$ git subtree push --prefix flasktaskr heroku master

Add a PostgreSQL database:
$ heroku addons:create heroku-postgresql:hobby-dev

Check to make sure your app is running:
$ heroku ps

View the app in your browser:
$ heroku open

If you see errors, open the Heroku log to view all errors and output:
$ heroku logs

Push only flasktaskr folder to heroku:
$ git subtree push --prefix flasktaskr heroku master

Run nosetests:
$ heroku run nosetests
$ heroku logs --app hidden-sands-78899 --dyno run.2030

#####################
#### RESTful API ####
#####################
	page 264
Put simply, an API is collection of functions that other programs can use to access or
manipulate data from a determine database. Each function has an associated endpoint
(also called a resource). One can make changes to a resource via the HTTP
methods/verbs:
1. GET - view a resource
2. POST - create a new resource
3. PUT - update a resource
4. DELETE - delete a resource


book 3 page 87
Also to make git-flow even easier to use, Vincent has created an open source tool called
git-flow that is a collection of scripts that make using this branching model pretty straightforward,
which can save a lot of keystrokes. Git-Flow can be found on Github here.
Thank you Vincent!


book 3 page 91
	Write your code and tests on the feature branch
	All work should be done on a feature branch to keep it separate from Master and to allow
	each to go through a code review before being merged back into master.
	Create the branch by simply typing:
	1 $ git checkout -b feature_branch_name


	Start with the following command:
	1 $ git rebase -i origin/master
	NOTE: the -i flag is optional but that gives you an interactive menu where you
	can reorder commits, squash them or fix them


#########################
##### Git Branching #####
#########################

http://pcottle.github.io/learnGitBranching/
	GIT COMMANDS
git commit # makes a new commit
git branch <branch-name> # creates new branch
git checkout <branch-name> # changes to another branch
	git checkout -b <branch-name> # creates new branch and changes to it

git merge <branch-to-merge-in> < # combines another branch in current branch

		REBASING
git rebase <base-branch> # rebases current branch into base branch
git checkout master
git rebase <head-feature-branch>

# head = currently checked out commit
# git log - shows commit hashes - commit hashes be used to checkout to individual commits

# git checkout ^ # moves up one commit
# git checkout ~<num> # moves up x commits

# git checkout master^ # moves to the first parent of master
# git checkout master^^ moves to the grandparent of master

# git branch -f master HEAD~3 # moves (by force) the master branch to three parents behind HEAD.

		REVERTING CHANGES IN Git
git reset # reverts changes back in time as if commits never happened, for example 
	git reset HEAD~1
git revert # makes a new commit that reverses changes instead of deleting the commit(s) entirely - good when commits are shared online instead of locally on own pc - for example: 
	git revert HEAD

		MOVING WORK AROUND
git cherry-pick <commit1> <commit2> <..> # copies a series of commits to current location (HEAD)


		CHERRY PICKING

git cherry-pick <commit1> <commit2> <...> # copy a series of commits below your current location (head)

rebase -i # interactive, shows commits and their hashes and messages
	can do 3 things:
		- reorder commits
		- omit commits (turn pick off)
		- squash commits (= combine commits)

		MAKE MODIFICATIONS TO EARLIER COMMITS
git rebase -i # bring the earlier commit as the latest commit
commit --amend # make modifications to the commit
git rebase -i # re-order the commit back to its original position

git tag <tag-name> <commit> # tags a commit

git describe <ref> # tells where you are relative to the closest tag


		SPECIFYING PARENTS
^ also accepts an optional number after it
	^ modifier specifies which parent reference to follow from a merge commit
^ and ~ modifiers can be changed, for example:
	git checkout HEAD~^2~2


	REMOTE REPOSITORIES
		INTRO
git clone # creates local copy of remote repository
# remote branches are displayed with format <remote name>/<branch name>
# most developers name their main remote as origin

		GIT FETCH
git fetch # fetches data from a remote repository
	# git fetch does not update your local master branch or other local branches - it does not change any of your local files!


		GIT PULL
once you have new commits available locally, you can incorporate them as if they were just normal commits on other branches. This means you could execute commands like:

git cherry-pick o/master
git rebase o/master
git merge o/master
etc., etc.
In fact, the workflow of fetching remote changes and then merging them is so common that git actually provides a command that does both at once! That command is git pull.

		GIT PUSH
git push <remote> <place> # uploads local commits to remote
	# you can only push to remote if your local copy of remote is the same as the remote!
	# if remote has been modified, you have to incorporate the changes on the remote on your local work!

git pull --rebase # fetches and rebases changes from remote


		REMOTE TRACKING
git checkout -b totallyNotMaster origin/master # creates a local branch totallyNotmaster which tracks remote branch master

git branch -u origin/master foo # sets foo branch to track origin/master


		PUSH ARGUMENTS
git push <remote> <place>
	# git push origin master

In order to specify both the source and the destination of <place>, simply join the two together with a colon:
	git push origin <source>:<destination>

		GIT FETCH ARGUMENTS

		SOURCE
git push origin :foo # deletes foo branch on remote
git fetch origin :bar # creates an empty branch called bar


###################
#### Travis CI ####
###################

Step 1: Sign up: https://travis-ci.org/
Settings up Travis CI:
- add repository to Travis at:
 https://travis-ci.org/ (open source projects, public repository
 https://travis-ci.com/ (private repositories)
 
Step 2: Add a Config File
- add a file called .travis.yml
 
 Step 3: Trigger a New Build
- commit code locally, push to github
	- a new build will be added to Travis CI queue and it will be ran after a while (can take a few minutes)
- put the status into a README.md file (instructions can be found at https://docs.travis-ci.com/user/status-images/ )

Step 4: Travis Command Line Client
- Windows: RubyInstaller http://rubyinstaller.org/
- run the following command to install travis:
$ gem install travis

- Now, within your project directory, run the following command:
$ travis setup heroku

- Answer 'yes' to all the prompts.
This






